---
title: "lista_1"
format: html
editor: visual
---

# Exercício sobre parte 1 - Forecasting

## Bibliotecas

Importando Pacotes utilizados neste documento.

```{r}
library(fpp3)
library(tseries)
library(forecast)
library(prophet)
library(xts)
library(modeltime)
library(tidymodels)
```

## Importando Base de Dados

Para a resolução dos exercícios, será utilizada a base de dados **aus_retail**, que consiste em dados sobre as vendas no varejo australiano, uma série temporal mensal de diferentes categorias de varejo.

Abaixo esta listada todas as categorias presentes na base de dados:

```{r}
unique(aus_retail$Industry)
```

Para realizar o trabalho iremos utilizar a categoria de "Department stores":

```{r}
# Realizando Filtro
department_stores_data <- aus_retail %>%
  filter(Industry == "Department stores")
```

Estes dados referem-se a lojas de departamentos, que são grandes estabelecimentos de varejo que oferecem uma ampla variedade de mercadorias em diferentes seções ou departamentos dentro da mesma loja.

## Pre-Precessamento

Da forma que o dataframe está organizado, existem diferentes estados:

```{r}
unique(department_stores_data$State)
```

Para a resolução dos exercícios da lista, serão utilizados os dados da Austrália inteira, sendo necessária a seguinte transformação:

```{r}
department_stores_group <- department_stores_data %>%
  index_by(Month) %>%
  summarise(Turnover_total = sum(Turnover, na.rm = TRUE))
```

Com esta transformação, os dados são agrupados pela coluna "Month", somando os turnovers de todos os estados conforme essa coluna. O resultado final é a receita total de lojas de departamentos para toda a Austrália.

## Resolução:

### Questão 1

**Plote os gráficos da série e das ACF/PACF e discorra sobre o aspecto da série. Faça o teste de raíz unitária e explique as conclusões. Existe tendência estocástica?**

O primeiro gráfico análisado será o Time Plot:

```{r}
department_stores_group %>%
  autoplot(Turnover_total) +
  labs(y="Turnover", title="Australian Department Stores Turnover")
```

O gráfico plotado acima demonstra um aparente padrão sazonal na série, com um pico de receita que se repete ao longo dos anos. Além disso, parece haver uma tendência de aumento de receita ao longo da série.

Outro gráfico analisado será o Seasonal Plot:

```{r}
department_stores_group %>%
  gg_season(Turnover_total, period = "year")
```

Observando o gráfico plotado, é possível identificar um padrão sazonal de aumento de vendas no mês de dezembro, representado pelo pico no gráfico. Além disso, após esse pico de vendas, há uma queda aparente em fevereiro, que se mostra mais acentuada nos anos mais recentes.

Para uma melhor compreensão sobre a possível tendência de aumento de receita ao longo dos anos, podemos observar o gráfico de subplots abaixo:

```{r}
department_stores_group %>%
  gg_subseries(Turnover_total)
```

Como podemos observar pelo gráfico discriminado por meses acima, a sazonalidade de aumento de vendas em dezembro está bem representada. Além disso, nota-se que, de maneira geral, houve um aparente aumento acentuado de receita em todos os meses entre os anos de 1990 e o início dos anos 2000, estabilizando-se nos anos seguintes.

Para reforçar essas premissas, podemos analisar as funções de autocorrelação e autocorrelação parcial.

```{r}
# Gráfico de Autocorrelação
department_stores_group %>%
  ACF(Turnover_total, lag_max = 100) %>%
  autoplot()
```

Como esperado, a função de autocorrelação revela fortes correlações entre os lags múltiplos de 12 (12, 24, 36...) indicando a sazonalidade associada aos meses de dezembro. Além disso, é possível observar uma aparente tendência positiva, evidenciada pela significativa autocorrelação nos lags menores, que diminui gradualmente à medida que os lags aumentam.

```{r}
# Gráfico de Autocorrelação Parcial
department_stores_group %>%
  PACF(Turnover_total, lag_max = 100) %>%
  autoplot()
```

Analisando o gráfico gerado pela PACF, percebemos um pico positivo seguido por um pico negativo, ambos muito acima das bandas do intervalo de confiança, nos lags 12 e 13. Isso indica uma forte sazonalidade neste período do ano, conforme observado nos gráficos anteriores.

Ao que tudo indica, esta série temporal possui raiz unitária e não é estacionária. Para obtermos mais uma medida que confirme esta hipótese, podemos realizar o teste de raiz unitária de Dickey-Fuller abaixo:

```{r}
# Realizar o teste ADF
adf.test(department_stores_group$Turnover_total, alternative = c("stationary", "explosive"), k = trunc((length(department_stores_group$Turnover_total)-1)^(1/3)))

```

O resultado do teste realizado, com p-valor menor do que o nível de 0,05, indica que não existem evidências significativas para rejeitar a hipótese nula de que a série não é estacionária. Este resultado contraria os resultados obtidos anteriormente pelos gráficos da série e pela função ACF. Um dos motivos para isso pode ser o fato de a série possuir uma tendência fraca que não foi capturada pelo teste ADF. Nesse caso, podemos dizer que a série possui uma fraca estacionariedade e não tem uma tendência estocástica evidente. Contudo, esses resultados podem estar sendo afetados pela forte sazonalidade que a série apresenta.

### Questão 2

**Use um método de decomposição estudado e explique os componentes, tendo em vista o aspecto da série. Existe sazonalidade? Qual periodicidade?**

Aplicando método de decomposição dos componentes:

```{r}
department_stores_group %>%
  model(
    classical_decomposition(Turnover_total, type = "additive")
  ) |>
  components() |>
  autoplot() +
  labs(title = "Decomposição Série Departaments Stores")
```

Como podemos observar no gráfico de decomposição, existe um padrão sazonal de picos de venda no final de cada ano da série, fenômeno que já podia ser observado nos gráficos gerados anteriormente.

Ao contrário do resultado do teste ADF realizado na questão anterior, a decomposição da série temporal sugere a presença de uma tendência positiva de aumento nas vendas ao longo dos anos, o que também pode ser observado nos gráficos ACF e Seasonal plots realizados anteriormente.

Assim, podemos concluir que existe uma sazonalidade de 12 meses ao final de cada ano.

### Questão 3

**Identifique um modelo SARIMA apropriado. Justifique o modelo escolhido através de critérios de informação e/ou usando a etapa de identificação da abordagem Box-Jenkins. Nesta etapa é possível utilizar um método automático de seleção das ordens do modelo.**

Como foi observado anteriormente, existe uma sazonalidade anual na série. Por conta disso, iremos diferenciar a série, componente d, com base nesta sazonalidade anual para tornar a série ainda mais estacionária.

```{r}
# Aplicando diferenciação de 12 meses
department_stores_diff <- diff(department_stores_group$Turnover_total, lag=12)

# Plotar ACF
acf(department_stores_diff, main="ACF da Série Diferenciada Anualmente")

```

```{r}
# Plotando PACf
pacf(department_stores_diff, main="PACF da Série Diferenciada Anualmente")
```

Ao aplicar a diferenciação, percebe-se que os componentes de tendência e sazonalidade observados anteriormente foram reduzidos e que a série apresentou um resultado de ACF muito mais próximo de um padrão estacionário.

Com isso, podemos rodas os modelos abaixo:

```{r}
# Definindo os dados
y <- ts(department_stores_group$Turnover_total, frequency = 12) 

# Definindo os parâmetros para testar
orders <- list(c(1,1,0), c(1,1,1), c(0,1,0), c(0,1,1))
seasonal_orders <- list(c(1,1,0), c(1,1,1), c(0,1,0))

# Inicializando listas para armazenar os resultados
models <- list()
aic <- numeric()
aicc <- numeric()
bic <- numeric()

# Loop para ajustar os modelos
for (i in seq_along(orders)) {
    for (j in seq_along(seasonal_orders)) {
        model <- Arima(y, order = orders[[i]],
                       seasonal = list(order = seasonal_orders[[j]], period = 12),
                       method = "ML")
        model_label <- paste("fit", i, j, sep="_")
        models[[model_label]] <- model
        aic <- c(aic, model$aic)
        aicc <- c(aicc, model$aicc)
        bic <- c(bic, model$bic)
    }
}

# Criando uma tabela com os resultados
results <- cbind(Model = names(models), AIC = aic, AICC = aicc, BIC = bic)
results <- as.data.frame(results)


# Mostrando a tabela de resultados
print(results[order(results$AICC),]  )
```

De todos os modelos testados o que obteve melhor desempenho de acordo com a métrica AICC foi o modelo fit_2_2:

```{r}
best_model <- models[["fit_2_2"]]

# Mostrando um resumo do modelo
summary(best_model)
```

Ajustando o modelo otimizado:

```{r}
fit = Arima(y, order=c(1,1,1), seasonal=list(order=c(1,1,1), period=12), method="ML")
```

### Questão 4

**Faça a verificação de diagnóstico residual de seu modelo ARIMA. Os resíduos são ruído branco?**

Com o modelo otimizado ajustado, podemos realizar o diagnostico de desempenho.

```{r}
par(mfrow=c(1,2))
acf(residuals(fit), 96, main="")
pacf(residuals(fit), 96, main="")
```

Como pode ser observado, os resíduos apresentam caracteristicas de ruído branco.

### Questão 5

**Use o modelo SARIMA de sua escolha para fazer previsões h (livre escolha) passos à frente.**

Realizando predição de 24 períodos (2 anos) com o modelo otimizado.

```{r}
plot(forecast(fit, 24))
```

### Questão 6

**Repita os passos acima ajustando um modelo que use o método do Prophet.**

**Faça a previsão para o mesmo período e compare com o modelo SARIMA.**

Rodando o Prophet com sazonalidade multiplicativa:

```{r}
df <- data.frame(ds = zoo::index(as.xts(y)),y = coredata(as.xts(y)))
m <- prophet(df, seasonality.mode = "multiplicative") 
future <- make_future_dataframe(m, 24, freq = 'm')
forecast <- predict(m, future)
plot(m, forecast)
```

Comparando SARIMA e Prophet no dataset inteiro:

```{r}
sarima_model <- fit
forecast_sarima <- forecast(fit, 24)
prophet_model <- m
forecast_prophet <- forecast


# Combine forecasts for comparison
combined_forecast <- data.frame(
  ds = future$ds,
  actual = c(y, rep(NA, 24)), # Adjust length based on your data
  sarima = c(fitted(sarima_model), forecast_sarima$mean),
  prophet = forecast_prophet$yhat
)

# Plot combined forecasts
ggplot(combined_forecast, aes(x = ds)) +
  geom_line(aes(y = actual, color = "Actual")) +
  geom_line(aes(y = sarima, color = "SARIMA")) +
  geom_line(aes(y = prophet, color = "Prophet")) +
  ggtitle("Comparison of SARIMA and Prophet Forecasts") +
  labs(y = "Values", color = "Legend")

```

Comparando SARIMA e Prophet fazendo o split treino-teste:

```{r}
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))

split_forecast <- timetk::time_series_split(
  dados,
  date_var = date,
  initial = "410 months",
  assess = "24 months"
)
```

```{r}
split_forecast |>
  timetk::tk_time_series_cv_plan() |>
  timetk::plot_time_series_cv_plan(date, value)
```

```{r}
model_sarima <- arima_reg(
        seasonal_period          = 12,
        non_seasonal_ar          = 1,
        non_seasonal_differences = 1,
        non_seasonal_ma          = 1,
        seasonal_ar              = 1,
        seasonal_differences     = 1,
        seasonal_ma              = 1
    ) |>
  set_engine("arima") |>
  fit(value ~ date, training(split_forecast))


model_prophet <- prophet_reg(seasonality_yearly = TRUE) |>
  set_engine("prophet") |>
  fit(value ~ date, training(split_forecast))


mtable <- modeltime_table(
  model_sarima,
  model_prophet
)

dados_para_teste <- modeltime_calibrate(
  mtable,
  testing(split_forecast)
)

dados_para_teste |>
  modeltime_accuracy() |>
  table_modeltime_accuracy(.interactive = FALSE)
```

O SARIMA apresenta resultados melhores.

### Questão 7

**Faça um backtest e verifique qual modelo tem melhor poder preditivo (calcule medidas de performance que sejam comparáveis entre os dois modelos usando diferentes janelas de tempo). Nesta etapa você pode usar apenas um split treino/teste temporal ou vários (cross-validation). Justifique qual dos modelos você usaria.**

Vamos começar divindo em 10 splits:

```{r}
splits <- timetk::time_series_cv(
  dados,
  date_var = date,
  initial = "60 months",
  assess = "24 months",
  skip = 12,
  slice_limit = 10,
  cumulative = FALSE
)

splits
```

Verificando se os splits foram feitos corretamente:

```{r}
#| fig-height: 15
#| fig-width: 7
splits |>
  timetk::tk_time_series_cv_plan() |>
  timetk::plot_time_series_cv_plan(date, value)
```

Fit dos modelos nos 10 splits:

```{r}
resamples <- mtable |>
  modeltime.resample::modeltime_fit_resamples(
    resamples = splits
  )
```

Comparar resultado de cada split:

```{r}
resamples |>
  modeltime.resample::plot_modeltime_resamples(
    .point_size  = 3,
    .point_alpha = 0.8,
    .interactive = FALSE
  )
```

Comparar resultado do SARIMA x Prophet:

```{r}
resamples |>
  modeltime.resample::modeltime_resample_accuracy(summary_fns = mean) |>
  table_modeltime_accuracy(.interactive = FALSE)
```

Apesar do cross-validation ter piorado o resultado do SARIMA, ele continua melhor que o resultado do Prophet.

O modelo escolhido é o SARIMA.
