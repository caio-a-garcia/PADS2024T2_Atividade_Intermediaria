model_prophet
)
model_sarima <- arima_reg(
seasonal_period          = 12,
non_seasonal_ar          = 1,
non_seasonal_differences = 1,
non_seasonal_ma          = 1,
seasonal_ar              = 1,
seasonal_differences     = 1,
seasonal_ma              = 1
) |>
set_engine("arima") |>
fit(value ~ date, training(split_forecast))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) |>
set_engine("prophet") |>
fit(value ~ date, training(split_forecast))
mtable <- modeltime_table(
model_sarima,
model_prophet
)
dados_para_teste <- modeltime_calibrate(
mtable,
testing(split_forecast)
)
model_sarima <- arima_reg(
seasonal_period          = 12,
non_seasonal_ar          = 1,
non_seasonal_differences = 1,
non_seasonal_ma          = 1,
seasonal_ar              = 1,
seasonal_differences     = 1,
seasonal_ma              = 1
) |>
set_engine("arima") |>
fit(value ~ date, training(split_forecast))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) |>
set_engine("prophet") |>
fit(value ~ date, training(split_forecast))
mtable <- modeltime_table(
model_sarima,
model_prophet
)
dados_para_teste <- modeltime_calibrate(
mtable,
testing(split_forecast)
)
dados_para_teste |>
modeltime_accuracy() |>
table_modeltime_accuracy(.interactive = FALSE)
split_forecast |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "35 years",
assess = "24 months"
)
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "20 years",
assess = "24 months"
)
split_forecast |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "25 years",
assess = "24 months"
)
split_forecast |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "35 years",
assess = "24 months"
)
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "30 years",
assess = "24 months"
)
split_forecast |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
model_sarima <- arima_reg(
seasonal_period          = 12,
non_seasonal_ar          = 1,
non_seasonal_differences = 1,
non_seasonal_ma          = 1,
seasonal_ar              = 1,
seasonal_differences     = 1,
seasonal_ma              = 1
) |>
set_engine("arima") |>
fit(value ~ date, training(split_forecast))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) |>
set_engine("prophet") |>
fit(value ~ date, training(split_forecast))
mtable <- modeltime_table(
model_sarima,
model_prophet
)
dados_para_teste <- modeltime_calibrate(
mtable,
testing(split_forecast)
)
dados_para_teste |>
modeltime_accuracy() |>
table_modeltime_accuracy(.interactive = FALSE)
splits <- timetk::time_series_cv(
dados,
date_var = date,
initial = "60 months",
assess = "24 months",
skip = 12,
slice_limit = 10,
cumulative = FALSE
)
splits
#| fig-height: 10
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
#| fig-height: 15
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
#| fig-height: 30
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
| fig-height: 30
#| fig-height: 30
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
#| fig-height: 15
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
resamples <- mtable |>
modeltime.resample::modeltime_fit_resamples(
resamples = splits
)
resamples |>
modeltime.resample::plot_modeltime_resamples(
.point_size  = 3,
.point_alpha = 0.8,
.interactive = FALSE
)
resamples |>
modeltime.resample::modeltime_resample_accuracy(summary_fns = mean) |>
table_modeltime_accuracy(.interactive = FALSE)
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "440 months",
assess = "24 months"
)
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "420 months",
assess = "24 months"
)
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "410 months",
assess = "24 months"
)
split_forecast |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
model_sarima <- arima_reg(
seasonal_period          = 12,
non_seasonal_ar          = 1,
non_seasonal_differences = 1,
non_seasonal_ma          = 1,
seasonal_ar              = 1,
seasonal_differences     = 1,
seasonal_ma              = 1
) |>
set_engine("arima") |>
fit(value ~ date, training(split_forecast))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) |>
set_engine("prophet") |>
fit(value ~ date, training(split_forecast))
mtable <- modeltime_table(
model_sarima,
model_prophet
)
dados_para_teste <- modeltime_calibrate(
mtable,
testing(split_forecast)
)
dados_para_teste |>
modeltime_accuracy() |>
table_modeltime_accuracy(.interactive = FALSE)
splits <- timetk::time_series_cv(
dados,
date_var = date,
initial = "60 months",
assess = "24 months",
skip = 12,
slice_limit = 10,
cumulative = FALSE
)
splits
#| fig-height: 15
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
resamples <- mtable |>
modeltime.resample::modeltime_fit_resamples(
resamples = splits
)
resamples |>
modeltime.resample::plot_modeltime_resamples(
.point_size  = 3,
.point_alpha = 0.8,
.interactive = FALSE
)
resamples |>
modeltime.resample::modeltime_resample_accuracy(summary_fns = mean) |>
table_modeltime_accuracy(.interactive = FALSE)
library(fpp3)
link <- "https://www.tesourotransparente.gov.br/ckan/dataset/f85b6632-1c9c-4beb-9e60-72e91156c984/resource/f52c016b-1773-459b-a28f-6ddc4966a702/download/Transferencias---Dados-Consolidados.xlsx"
g <- httr::GET(link, httr::write_disk(tmp <- fs::file_temp(ext = ".xlsx")))
dados_raw <- tmp |>
readxl::read_excel(1, "C38:OK38", col_names = FALSE,
.name_repair = "minimal") |>
janitor::clean_names() |>
tidyr::pivot_longer(dplyr::everything()) |>
dplyr::mutate(
date = seq(as.Date("1991-01-01"), as.Date("2024-03-01"), "1 month"),
value = value / 1e9
) |>
dplyr::select(-name) |>
tidyr::fill(value) |>
dplyr::filter(lubridate::year(date) >= 1998)
dados_raw |>
ggplot(aes(date, value)) +
geom_line()
dados_raw |>
ggplot(aes(date, log(value))) +
geom_line()
dados <- dados_raw |>
mutate(
value = deflateBR::deflate(
value, date, "03/2024", index = "ipca"
)
)
# série deflacionada
dados |>
ggplot(aes(date, value)) +
geom_line()
tdata <- dados |>
mutate(date = yearmonth(date)) |>
as_tsibble(index = date)
tdata |>
gg_season(value)
tdata |>
gg_tsdisplay(value, plot_type = "partial")
tdata |>
mutate(value = difference(value, 12)) |>
gg_tsdisplay(value, plot_type = "partial")
tdata |>
features(value, unitroot_nsdiffs)
tdata |>
mutate(value = difference(value, 12)) |>
features(value, unitroot_ndiffs)
tdata |>
fabletools::model(
stl = feasts::STL(value)
) |>
fabletools::components() |>
autoplot()
tdata |>
fabletools::model(
stl = feasts::classical_decomposition(value)
) |>
fabletools::components() |>
autoplot()
# knitr::include_graphics("https://otexts.com/fpp3/figs/arimaflowchart.png")
par(mar = c(0,0,0,0))
magick::image_read("https://otexts.com/fpp3/figs/arimaflowchart.png") |>
plot()
fit <- tdata |>
model(
arima_manual = ARIMA(value ~ 1 + pdq(1,0,2) + PDQ(1,1,1)),
stepwise = ARIMA(value),
search = ARIMA(value, stepwise = FALSE)
)
fit |>
pivot_longer(
everything()
)
glance(fit)
fit |>
select(stepwise) |>
gg_tsresiduals(lag = 36)
augment(fit) |>
filter(.model == "stepwise") |>
features(.innov, ljung_box, lag = 36, dof = 4)
forecast(fit, h = 24) |>
filter(.model == "stepwise") |>
autoplot(tdata)
?fabletools:::autoplot.fbl_ts
train <- tdata |>
filter_index(. ~ "2019 dec")
acuracia <- train |>
model(
ETS(value),
ARIMA(value)
) |>
forecast(h = 24) |>
accuracy(tdata)
acuracia
dados |>
timetk::plot_time_series(date, value)
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "25 years",
assess = "24 months"
)
library(fpp3)
library(tseries)
library(forecast)
library(prophet)
library(xts)
library(modeltime)
library(tidymodels)
unique(aus_retail$Industry)
# Realizando Filtro
department_stores_data <- aus_retail %>%
filter(Industry == "Department stores")
unique(department_stores_data$State)
department_stores_group <- department_stores_data %>%
index_by(Month) %>%
summarise(Turnover_total = sum(Turnover, na.rm = TRUE))
department_stores_group %>%
autoplot(Turnover_total) +
labs(y="Turnover", title="Australian Department Stores Turnover")
department_stores_group %>%
gg_season(Turnover_total, period = "year")
department_stores_group %>%
gg_subseries(Turnover_total)
# Gráfico de Autocorrelação
department_stores_group %>%
ACF(Turnover_total, lag_max = 100) %>%
autoplot()
# Gráfico de Autocorrelação Parcial
department_stores_group %>%
PACF(Turnover_total, lag_max = 100) %>%
autoplot()
# Realizar o teste ADF
adf.test(department_stores_group$Turnover_total, alternative = c("stationary", "explosive"), k = trunc((length(department_stores_group$Turnover_total)-1)^(1/3)))
department_stores_group %>%
model(
classical_decomposition(Turnover_total, type = "additive")
) |>
components() |>
autoplot() +
labs(title = "Decomposição Série Departaments Stores")
# Aplicando diferenciação de 12 meses
department_stores_diff <- diff(department_stores_group$Turnover_total, lag=12)
# Plotar ACF
acf(department_stores_diff, main="ACF da Série Diferenciada Anualmente")
# Plotando PACf
pacf(department_stores_diff, main="PACF da Série Diferenciada Anualmente")
# Definindo os dados
y <- ts(department_stores_group$Turnover_total, frequency = 12)
# Definindo os parâmetros para testar
orders <- list(c(1,1,0), c(1,1,1), c(0,1,0), c(0,1,1))
seasonal_orders <- list(c(1,1,0), c(1,1,1), c(0,1,0))
# Inicializando listas para armazenar os resultados
models <- list()
aic <- numeric()
aicc <- numeric()
bic <- numeric()
# Loop para ajustar os modelos
for (i in seq_along(orders)) {
for (j in seq_along(seasonal_orders)) {
model <- Arima(y, order = orders[[i]],
seasonal = list(order = seasonal_orders[[j]], period = 12),
method = "ML")
model_label <- paste("fit", i, j, sep="_")
models[[model_label]] <- model
aic <- c(aic, model$aic)
aicc <- c(aicc, model$aicc)
bic <- c(bic, model$bic)
}
}
# Criando uma tabela com os resultados
results <- cbind(Model = names(models), AIC = aic, AICC = aicc, BIC = bic)
results <- as.data.frame(results)
# Mostrando a tabela de resultados
print(results[order(results$AICC),]  )
best_model <- models[["fit_2_2"]]
# Mostrando um resumo do modelo
summary(best_model)
fit = Arima(y, order=c(1,1,1), seasonal=list(order=c(1,1,1), period=12), method="ML")
par(mfrow=c(1,2))
acf(residuals(fit), 96, main="")
pacf(residuals(fit), 96, main="")
plot(forecast(fit, 24))
df <- data.frame(ds = zoo::index(as.xts(y)),y = coredata(as.xts(y)))
m <- prophet(df, seasonality.mode = "multiplicative")
future <- make_future_dataframe(m, 24, freq = 'm')
forecast <- predict(m, future)
plot(m, forecast)
sarima_model <- fit
forecast_sarima <- forecast(fit, 24)
prophet_model <- m
forecast_prophet <- forecast
# Combine forecasts for comparison
combined_forecast <- data.frame(
ds = future$ds,
actual = c(y, rep(NA, 24)), # Adjust length based on your data
sarima = c(fitted(sarima_model), forecast_sarima$mean),
prophet = forecast_prophet$yhat
)
# Plot combined forecasts
ggplot(combined_forecast, aes(x = ds)) +
geom_line(aes(y = actual, color = "Actual")) +
geom_line(aes(y = sarima, color = "SARIMA")) +
geom_line(aes(y = prophet, color = "Prophet")) +
ggtitle("Comparison of SARIMA and Prophet Forecasts") +
labs(y = "Values", color = "Legend")
dados <- data.frame(date=as.Date(zoo::index(as.xts(y))), value=coredata(as.xts(y)))
split_forecast <- timetk::time_series_split(
dados,
date_var = date,
initial = "410 months",
assess = "24 months"
)
split_forecast |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
model_sarima <- arima_reg(
seasonal_period          = 12,
non_seasonal_ar          = 1,
non_seasonal_differences = 1,
non_seasonal_ma          = 1,
seasonal_ar              = 1,
seasonal_differences     = 1,
seasonal_ma              = 1
) |>
set_engine("arima") |>
fit(value ~ date, training(split_forecast))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) |>
set_engine("prophet") |>
fit(value ~ date, training(split_forecast))
mtable <- modeltime_table(
model_sarima,
model_prophet
)
dados_para_teste <- modeltime_calibrate(
mtable,
testing(split_forecast)
)
dados_para_teste |>
modeltime_accuracy() |>
table_modeltime_accuracy(.interactive = FALSE)
splits <- timetk::time_series_cv(
dados,
date_var = date,
initial = "60 months",
assess = "24 months",
skip = 12,
slice_limit = 10,
cumulative = FALSE
)
splits
#| fig-height: 15
#| fig-width: 7
splits |>
timetk::tk_time_series_cv_plan() |>
timetk::plot_time_series_cv_plan(date, value)
resamples <- mtable |>
modeltime.resample::modeltime_fit_resamples(
resamples = splits
)
resamples |>
modeltime.resample::plot_modeltime_resamples(
.point_size  = 3,
.point_alpha = 0.8,
.interactive = FALSE
)
resamples |>
modeltime.resample::modeltime_resample_accuracy(summary_fns = mean) |>
table_modeltime_accuracy(.interactive = FALSE)
